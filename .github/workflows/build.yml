name: Build Sign APK And Upload To Firebase App Distribution

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up JDK
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      #Decode and save JKS file from Base64
      - name: Decode and save JKS file
        env:
          JKS_BASE64: ${{ secrets.JKS_BASE64 }}
        run: |
          echo "$JKS_BASE64" | base64 --decode > app/my-release-key.jks

      #Decode and save GOOGLE SERVICES JSON file from Base64
      - name: Decode and save google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > app/google-services.json

      #Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Cache Gradle dependencies
      - name: Cache Gradle files
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}

      #Clean the build
      - name: Clean the build
        run: ./gradlew clean

      #Run unit tests
      - name: Run unit tests
        run: ./gradlew test --no-daemon

      #Build APK with Gradle (signing via command-line parameters)
      - name: Build with Gradle
        run: ./gradlew assembleRelease
        env:
          KEYSTORE_PATH: my-release-key.jks  # Keystore file path
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}

      #Upload APK as an artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk

      #Decode and save Firebase credentials
      - name: Decode and save Firebase credentials
        env:
          CREDENTIAL_FILE_CONTENT: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
        run: |
          echo "$CREDENTIAL_FILE_CONTENT" | base64 --decode > firebase-credentials.json

      #Upload artifact to Firebase App Distribution
      - name: Upload Apk to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: ${{ secrets.FIREBASE_APP_ID }}
          serviceCredentialsFile: firebase-credentials.json
          groups: testers
          file: app/build/outputs/apk/release/app-release.apk